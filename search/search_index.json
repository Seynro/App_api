{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FastAPI","text":"<p>API for Scoring Model</p>"},{"location":"#starting","title":"STARTING","text":"<p>HTTP = http://127.0.0.1:8000/scoring</p>"},{"location":"#post","title":"POST","text":"<p>INPUT:</p> <pre><code>[\n{\n\"PIN_CODE\": \"STR 7\",\n\"TX_FID\": INT 11,\n\"APP_ID\": \"{STR 25}\"\n}\n]\n</code></pre> <p>OUTPUT:</p> <pre><code>{\n\"status\": STATUS,\n\"score\": INT\n}\n</code></pre>"},{"location":"Page2/","title":"CODE","text":""},{"location":"Page2/#api","title":"API","text":""},{"location":"Page2/#libraries-used","title":"Libraries used","text":"<pre><code>numpy == 1.24.3\npandas == 2.0.2\nscikit-learn == 1.2.2\nfastapi == 0.96.0\nuvicorn == 0.22.0\nconfigparser == 5.3.0\npython-dotenv == 1.0.0\ncx-oracle == 8.3.0\npymysql == 1.0.3\n</code></pre>"},{"location":"Page2/#mainpy","title":"main.py","text":"Importing<pre><code>from typing import Optional\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom datetime import datetime\nfrom enum import Enum\nfrom scoring_model import scoring_func\n</code></pre> Starting API<pre><code>app = FastAPI(\ntitle='Trading app'\n)\n</code></pre> Defining parameters' types<pre><code>class Param(BaseModel):\nPIN_CODE: str\nTX_FID: int\nAPP_ID: str\n</code></pre> Starting Scoring Model and Returning Status<pre><code>@app.post('/scoring')\ndef scoring(param: list[Param]):\nresult = scoring_func(param)\nprint(result)\nif result == 'APP_ID' or result == 'TX_FID' or result == 'PIN_CODE':\nerror = result + ' is invalid'\nreturn {\"status\": 404, \"score\": error}\nelse:\nreturn {\"status\": 200, \"score\": result}\n</code></pre> Whole Code<pre><code>from typing import Optional\nfrom fastapi import FastAPI\nfrom pydantic import BaseModel\nfrom datetime import datetime\nfrom enum import Enum\nfrom scoring_model import scoring_func\napp = FastAPI(\ntitle='Trading app'\n)\nclass Param(BaseModel):\nPIN_CODE: str\nTX_FID: int\nAPP_ID: str\n@app.post('/scoring')\ndef scoring(param: list[Param]):\nresult = scoring_func(param)\nprint(result)\nif result == 'APP_ID' or result == 'TX_FID' or result == 'PIN_CODE':\nerror = result + ' is invalid'\nreturn {\"status\": 404, \"score\": error}\nelse:\nreturn {\"status\": 200, \"score\": result}\n</code></pre>"},{"location":"Page2/#scoring-model","title":"Scoring Model","text":""},{"location":"Page2/#scoring_modelpy","title":"scoring_model.py","text":"importing<pre><code>import numpy as np\nimport re\n</code></pre> <p>Check for Right <code>input</code> and <code>creating output</code></p> main_class<pre><code>class main_class:\ndef __init__(self, param):\n\"\"\"\n        Function takes parameters (param) as JSON and transforms tham into str and int for each parameter\n        PIN_CODE - str, TX_FID - int, APP_ID - str\n        \"\"\"\nself.param = str(param)\nPIN_CODE_match = re.search(r\"PIN_CODE='(\\d+)'\", self.param)\nTX_FID_match = re.search(r\"TX_FID=(\\d+)\", self.param)\nAPP_ID_match = re.search(r\"APP_ID='(\\{[\\w\\d]+\\})'\", self.param)\nself.PIN_CODE = PIN_CODE_match.group(1) if PIN_CODE_match else None\nself.TX_FID = int(TX_FID_match.group(1)) if TX_FID_match else None\nself.APP_ID = APP_ID_match.group(1) if APP_ID_match else None\ndef check(self):\n\"\"\"\n        Function checks if PIN_CODE's length is 7, TX_FID's length is 11, APP_ID's length is 25 \n        and it starts and ends with {}. It returns True and None if everything is right and False \n        and the name of parameter if not\n        \"\"\"\nif (len(self.PIN_CODE) != 7) or (not isinstance(self.PIN_CODE, str)):\nreturn (False, 'PIN_CODE')\nif  (not isinstance(self.TX_FID, int)) or (len(str(self.TX_FID)) != 10):\nreturn (False, 'TX_FID')\nif (not isinstance(self.APP_ID, str)) or (self.APP_ID is None) or (len(self.APP_ID) != 25) or (self.APP_ID[0] != \"{\") or (self.APP_ID[-1] != \"}\"):\nreturn (False, 'APP_ID')\nreturn (True, None)\ndef random(self):\n\"\"\"\n        Function creates random number and returns it\n        \"\"\"\nnum = np.random.randint(1, 101)\nreturn num\n</code></pre> <p>Function takes parameters (param) as <code>JSON</code> and transforms tham into <code>str</code> and <code>int</code> for each parameter <code>PIN_CODE - str</code>, <code>TX_FID - int</code>, <code>APP_ID - str</code></p> transforming<pre><code>def __init__(self, param):\nself.param = str(param)\nPIN_CODE_match = re.search(r\"PIN_CODE='(\\d+)'\", self.param)\nTX_FID_match = re.search(r\"TX_FID=(\\d+)\", self.param)\nAPP_ID_match = re.search(r\"APP_ID='(\\{[\\w\\d]+\\})'\", self.param)\nself.PIN_CODE = PIN_CODE_match.group(1) if PIN_CODE_match else None\nself.TX_FID = int(TX_FID_match.group(1)) if TX_FID_match else None\nself.APP_ID = APP_ID_match.group(1) if APP_ID_match else None\n</code></pre> <p>Function checks if <code>PIN_CODE</code> length is 7, <code>TX_FID</code> length is 11, <code>APP_ID</code> length is 25  and it starts and ends with <code>{}</code>. It returns <code>True</code> and <code>None</code> if everything is right and <code>False</code>  and the <code>name of parameter</code> if not</p> check<pre><code>def check(self):\nif (len(self.PIN_CODE) != 7) or (not isinstance(self.PIN_CODE, str)):\nreturn (False, 'PIN_CODE')\nif  (not isinstance(self.TX_FID, int)) or (len(str(self.TX_FID)) != 10):\nreturn (False, 'TX_FID')\nif (not isinstance(self.APP_ID, str)) or (self.APP_ID is None) or (len(self.APP_ID) != 25) or (self.APP_ID[0] != \"{\") or (self.APP_ID[-1] != \"}\"):\nreturn (False, 'APP_ID')\nreturn (True, None)\n</code></pre> <p>Function creates random <code>number</code> and returns it</p> Randomizer<pre><code>def random(self):\nnum = np.random.randint(1, 101)\nreturn num\n</code></pre>"}]}